generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add the following to all schemas:
//
// generated
// createdAt DateTime  @default(now())

model Meta {
  id        String   @id @unique @default(uuid()) @db.Uuid
  key       String   @unique
  value     String
  // generated
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Don't touch above here

model Teacher {
  id                    String   @id @unique @default(uuid()) @db.Uuid
  firstName             String
  lastName              String
  department            String
  numRatings            Int
  avgRating             Float
  avgDifficulty         Float
  wouldTakeAgainPercent Float
  updatedAt             DateTime @updatedAt

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String

  @@index([schoolId, lastName], name: "teacher_last_name")
  @@index([schoolId, firstName], name: "teacher_first_name")
  @@index([schoolId, lastName, firstName], name: "teacher_last_first_name")
}

model School {
  // ID is per rate my professor, base64 of "School-XXXX" where XXXX is an integer
  id       String    @id @unique
  name     String
  // don't fucking query plz
  Teachers Teacher[]
  Subjects Subject[]

  @@index([name], name: "name")
  @@index([id], name: "id")
}

// classes!
model Subject {
  id        String   @id @unique @default(uuid()) @db.Uuid
  name      String?
  slug      String
  school    School   @relation(fields: [schoolId], references: [id])
  // generated
  createdAt DateTime @default(now())
  schoolId  String
  // don't query most likely?
  classes   Class[]

  @@unique([slug, schoolId])
  @@index([slug])
}

model Class {
  id                  String             @id @unique @default(uuid()) @db.Uuid
  subject             Subject            @relation(fields: [subjectId], references: [id])
  name                String
  number              String
  term                Term
  hours               String
  equivalencies       String[]
  sections            Section[]
  aggregations        ClassAggregations? @relation(fields: [classAggregationsId], references: [id])
  // generated
  createdAt           DateTime           @default(now())
  subjectId           String             @db.Uuid
  comments            Comment[]
  classAggregationsId String?            @unique @db.Uuid

  @@unique([subjectId, number, term])
  @@index([subjectId, number], name: "class_subject_number")
}

model ClassAggregations {
  id             String   @id @unique @default(uuid()) @db.Uuid
  numRatings     Int
  rating         Int
  difficulty     Int
  wouldRecommend Int
  totalFive      Int
  totalFour      Int
  totalThree     Int
  totalTwo       Int
  totalOne       Int
  // generated
  createdAt      DateTime @default(now())
  classId        String?  @unique @db.Uuid
  class          Class?
}

model Section {
  id          String    @id @unique @default(uuid()) @db.Uuid
  number      String
  classNumber String
  room        String
  instruction String
  instructor  String
  class       Class     @relation(fields: [classId], references: [id])
  // generated
  createdAt   DateTime  @default(now())
  classId     String    @db.Uuid
  // do not query
  Comments    Comment[]

  @@unique([classNumber, number])
}

enum Term {
  FALL2022
  SPRING2023
  SUMMER2023
  FALL2023
  SPRING2024
  SUMMER2024
  FALL2024
  SPRING2025
  SUMMER2025
  FALL2025
  SPRING2026
}

model Comment {
  id         String   @id @unique @default(uuid()) @db.Uuid
  text       String
  rating     Int
  difficulty Int
  recommend  Boolean
  class      Class    @relation(fields: [classId], references: [id])
  section    Section? @relation(fields: [sectionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  // generated
  createdAt  DateTime @default(now())
  sectionId  String?  @db.Uuid
  classId    String   @db.Uuid
  userId     String

  @@index([classId])
  @@index([sectionId])
  @@index([classId, sectionId])
  @@index([userId])
}
