generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add the following to all schemas:
//
// generated
// createdAt DateTime  @default(now())

model Meta {
  id        String   @id @unique @default(uuid()) @db.Uuid
  key       String   @unique
  value     String
  // generated
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Don't touch above here

model Teacher {
  id                    String   @id @unique @default(uuid()) @db.Uuid
  firstName             String
  lastName              String
  department            String
  numRatings            Int
  avgRating             Float
  avgDifficulty         Float
  wouldTakeAgainPercent Float
  updatedAt             DateTime @updatedAt

  school   School @relation(fields: [schoolId], references: [id])
  schoolId String
}

model School {
  // ID is per rate my professor, base64 of "School-XXXX" where XXXX is an integer
  id      String    @id @unique
  name    String
  teacher Teacher[]
}
