generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl", "debian-openssl-1.1.x"]
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Add the following to all schemas:
//
// generated
// createdAt DateTime  @default(now())

model Meta {
  id        String   @id @unique @default(uuid()) @db.Uuid
  key       String   @unique
  value     String
  // generated
  createdAt DateTime @default(now())
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Don't touch above here

model Teacher {
  id String @id @unique @default(uuid()) @db.Uuid

  firstName             String
  lastName              String
  department            String
  numRatings            Int
  avgRating             Float
  avgDifficulty         Float
  wouldTakeAgainPercent Float

  school School @relation(fields: [schoolId], references: [id])

  // generated
  schoolId String    @db.Uuid
  Sections Section[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([schoolId, lastName], name: "teacher_last_name")
  @@index([schoolId, firstName], name: "teacher_first_name")
  @@index([schoolId, lastName, firstName], name: "teacher_last_first_name")
}

model School {
  id    String @id @unique @default(uuid()) @db.Uuid
  // rmpId is per rate my professor, base64 of "School-XXXX" where XXXX is an integer
  rmpId String @unique
  name  String

  // don't query
  Teachers Teacher[]
  Subjects Subject[]
  Classes  Class[]

  // generated
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([rmpId], name: "rmpId")
}

model Subject {
  id String @id @unique @default(uuid()) @db.Uuid

  name String? // full name of the subject: "Computer Science" e.g.
  slug String // short name of the subject: "COMP" e.g.

  school  School  @relation(fields: [schoolId], references: [id])
  classes Class[] // don't query most likely?

  // generated
  schoolId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, schoolId])
  @@index([slug])
}

model Class {
  id String @id @unique @default(uuid()) @db.Uuid

  name          String // full name of the class
  number        String // number for class: "101" e.g.
  hours         Decimal // credit hours. stored as decimal to avoid floating point errors
  equivalencies String[] // array of equivalencies for the class in `${slug} ${number}` format

  sections     Section[]
  comments     Comment[]
  aggregations ClassAggregations @relation(fields: [classAggregationsId], references: [id])
  school       School            @relation(fields: [schoolId], references: [id])
  subject      Subject           @relation(fields: [subjectId], references: [id])

  // generated
  classAggregationsId String @unique @db.Uuid
  schoolId            String @db.Uuid
  subjectId           String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([schoolId, subjectId, number])
  @@index([schoolId, subjectId, number], name: "class_subject_number")
}

model ClassAggregations {
  id String @id @unique @default(uuid()) @db.Uuid

  numRatings     Int // count of ratings
  cumRating      Int // sum of ratings
  difficulty     Int // sum of difficulty ratings
  wouldRecommend Int // count of recommended ratings

  // counts for each of the star numbers
  totalFive  Int
  totalFour  Int
  totalThree Int
  totalTwo   Int
  totalOne   Int

  // generated
  class   Class?
  classId String? @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Section {
  id String @id @unique @default(uuid()) @db.Uuid

  number      String // section number, usually 001 or so. sometimes has a letter?
  room        String // room number
  instruction String // mode of instruction

  // used to identify the which term the section is in, e.g. "Fall 2022"
  term Term
  year Int

  teacher Teacher @relation(fields: [teacherId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  // generated
  classId   String @db.Uuid
  teacherId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // do not query
  Comments Comment[]
}

enum Term {
  SPRING
  SUMMER
  FALL
  WINTER
  JANUARY
}

model Comment {
  id String @id @unique @default(uuid()) @db.Uuid

  text String // actual content of each comment

  rating     Int // rating of the class from 1-5 inclusive
  difficulty Int // difficulty of the class from 1-5 inclusive
  recommend  Boolean // whether the user would recommend the class

  class   Class    @relation(fields: [classId], references: [id])
  section Section? @relation(fields: [sectionId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  // generated
  sectionId String? @db.Uuid
  classId   String  @db.Uuid
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([classId])
  @@index([sectionId])
  @@index([classId, sectionId])
  @@index([userId])
}
